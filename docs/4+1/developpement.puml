@startuml
title 4+1 - Vue Développement (projets .NET + stéréotypes de dépendance)
skinparam packageStyle rectangle

package "BrokerX.Domain" as Domain {
  package "Model" as DomModel {}
  package "Ports.Inbound" as DomIn {}
  package "Ports.Outbound" as DomOut {}
}

package "BrokerX.Application" as App {
  package "Services" as AppSvc {}
  package "DTOs" as AppDto {}
}

package "BrokerX.Infrastructure.Web" as Web {
  package "Controllers" as WebCtl {}
  package "DTOs" as WebDto {}
}

package "BrokerX.Infrastructure.Persistence" as Persist {
  package "Repositories" as Repo {}
  package "Migrations" as Mig {}
}

package "BrokerX.Infrastructure.Adapters" as Adapters {
  package "Otp" {}
  package "Kyc" {}
  package "Payment" {}
  package "Session" {}
  package "Audit" {}
  package "Ledger" {}
}

' ===========================
' Dépendances inter-projets
' ===========================
Web ..> App       : <<access>>
App  ..> Domain   : <<access>>
Persist ..> Domain: <<access>>
Adapters ..> Domain: <<access>>

' Optionnel si tes ports sortants sont dans Application :
' Persist ..> App    : <<access>>
' Adapters ..> App   : <<access>>

' ===========================
' Dépendances intra-projets
' (simulent l'effet de "using")
' ===========================
WebCtl ..> DomIn   : <<import>>  ' les contrôleurs consomment les ports entrants
WebCtl ..> AppDto  : <<import>>  ' mapping DTO web -> DTO application
AppSvc  ..> DomModel: <<import>>  ' services manipulent directement le modèle
Repo    ..> DomOut  : <<import>>  ' repos implémentent les ports sortants

legend right
  **Stéréotypes de dépendance (Visual Paradigm)**
  - <<import>> : importe les noms publics (résolution non qualifiée)
  - <<access>> : accès aux éléments publics sans import de noms

  **Recommandations**
  - Entre projets .NET : preferer <<access>>
  - A l'intérieur d'un projet (sous-packages) : <<import>> pour figurer les "using"

  **Sens cible**
  Infrastructure(Web/Adapters/Persistence) -> Application -> Domain
end legend
@enduml
